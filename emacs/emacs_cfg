(setq inhibit-splash-screen t)

;; System-type definition
(defun system-is-linux()
    (string-equal system-type "gnu/linux"))
(defun system-is-windows()
    (string-equal system-type "windows-nt"))

(put 'upcase-region 'disabled nil)
(setq cfg_path "~/cfg")

(require 'ido)
(ido-mode t)
(setq ido-enable-flex-matching t)

(setq c-basic-offset 4)
(setq c-default-style '((java-mode . "java")
                        (awk-mode . "awk")
                        (other . "k&r")))


(add-hook 'c-mode-hook (lambda () (setq comment-start "//"
                                        comment-end   "")))

(setq-default indent-tabs-mode nil)


(setq my-linux-style-path-alist (list (expand-file-name
                                       "/nfs/inn/proj/mpi/users/vapetrov/OFI/ssg_sfi-libfabric")
                                      (expand-file-name
                                       "/nfs/inn/proj/mpi/users/vapetrov/github/libfabric")
                                      )
)


(add-hook 'c-mode-hook (lambda ()
                           (dolist (path my-linux-style-path-alist)
                             (if (string-match path (buffer-file-name))
                                 (c-set-style "linux")))))


(setq-default normal-erase-is-backspace-mode 1)

(define-key key-translation-map [?\C-h] [?\C-?]) ;; translate C-h to DEL
(define-key key-translation-map [?\C-/] [?\C-_]) ;; translate C-/ to C-_

(global-set-key [(meta h)] 'backward-kill-word)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Setup Magit - Git front end for emacs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq dash_dir (concat
                          (file-name-as-directory cfg_path)
                          (file-name-as-directory "emacs")
                          (file-name-as-directory "install")
                          "dash.el")
)
(add-to-list 'load-path dash_dir)

(setq magit_dir (concat
                          (file-name-as-directory cfg_path)
                          (file-name-as-directory "emacs")
                          (file-name-as-directory "install")
                          (file-name-as-directory "magit")
                          "lisp")
)
(add-to-list 'load-path magit_dir)
(require 'magit)
(defalias 'mg 'magit-status)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(defun create-tags (dir-name)
    "Create tags file."
    (interactive "DDirectory: ")
    (shell-command
     (format "ctags -f %s/TAGS -e -R %s" dir-name
             (directory-file-name dir-name)))
  )

;; (add-hook 'before-save-hook 'delete-trailing-whitespace)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; ws-trim
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq ws-trim-dir (concat
                                 (file-name-as-directory cfg_path)
                                 (file-name-as-directory "emacs")
                                 (file-name-as-directory "install")
                                 "ws_trim")

)
(add-to-list 'load-path ws-trim-dir)
(require 'ws-trim)
(global-ws-trim-mode t)

(which-func-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Setup sr-speedbar
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;(setq sr-speedbar-dir (concat
;;                                (file-name-as-directory cfg_path)
;;                                (file-name-as-directory "emacs")
;;                                (file-name-as-directory "install")
;;                                "sr_speedbar")
;;
;;)
;;(add-to-list 'load-path sr-speedbar-dir)
;;(require 'sr-speedbar)
;;(global-set-key (kbd "M-s M-s") 'sr-speedbar-toggle)

;;(show-paren-mode 1)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Setup Color-themes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq color_theme_dir (concat
                          (file-name-as-directory cfg_path)
                          (file-name-as-directory "emacs")
                          (file-name-as-directory "install")
                          "color-theme-6.6.0")
)
(add-to-list 'load-path color_theme_dir)
(require 'color-theme)

(when (display-graphic-p)
(load-file (concat
                                (file-name-as-directory cfg_path)
                                (file-name-as-directory "emacs")
                                (file-name-as-directory "install")
                                (file-name-as-directory "monokai-theme")
                                "monokai-theme.el"))

(require 'monokai-theme)
(set-default-font
 "-Misc-Fixed-Medium-R-Normal--15-140-75-75-C-90-ISO8859-1")
)



;; (setq solarized_theme_dir (concat
;;                           (file-name-as-directory cfg_path)
;;                           (file-name-as-directory "emacs")
;;                           (file-name-as-directory "install")
;;                           "emacs-color-theme-solarized")
;; )
;; (add-to-list 'load-path solarized_theme_dir)
;; (require 'color-theme-solarized)
;; (load-theme 'solarized-dark t)



(setq ansi-term-color-vector [unspecified "#3f3f3f" "#cc9393" "#7f9f7f" "#f0dfaf" "#8cd0d3" "#dc8cc3" "#93e0e3" "#dcdccc"])
;;(add-to-list 'custom-theme-load-path (concat
;;                                (file-name-as-directory cfg_path)
;;                                (file-name-as-directory "emacs")
;;                                (file-name-as-directory "install")
;;                                "monokai-theme"))
;;(load-theme 'monokai t)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq highlight_symbol_dir (concat
                           (file-name-as-directory cfg_path)
                           (file-name-as-directory "emacs")
                           (file-name-as-directory "install")
                           "highlight_symbol")
)

(add-to-list 'load-path highlight_symbol_dir)

(require 'highlight-symbol)

(global-set-key (kbd "C-x M-h") 'highlight-symbol-at-point)
(global-set-key (kbd "C-x M-r") 'highlight-symbol-remove-all)
(global-set-key [f3] 'highlight-symbol-next)
(global-set-key [f4] 'highlight-symbol-prev)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq autocomplete_dir  (concat
                               (file-name-as-directory cfg_path)
                               (file-name-as-directory "emacs")
                               (file-name-as-directory "install")
                               "auto-complete-1.3.1")
)

(setq autocomplete_dict (concat
                        (file-name-as-directory autocomplete_dir)
                        "dict")
)

(add-to-list 'load-path autocomplete_dir)
(require 'auto-complete-config)
(ac-config-default)
(add-to-list 'ac-dictionary-directories autocomplete_dict)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun my-cpp-highlight ()
  "highlight c/c++ #if 0 #endif macros"
  ;; (interactive)
  (setq cpp-known-face 'default)
  (setq cpp-unknown-face 'default)
  (setq cpp-known-writable 't)
  (setq cpp-unknown-writable 't)
  (setq cpp-edit-list '(("0" font-lock-comment-face default both)
                        ("1" default font-lock-comment-face both)))
  (cpp-highlight-buffer t))

(add-hook 'c-mode-common-hook 'my-cpp-highlight)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq save-place-file "~/.emacs.saveplace")
(setq-default save-place t)
(require 'saveplace)

(setq compilation-scroll-output 'first-error)

(global-set-key [f5] 'compile)

(defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the
     current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end
                  (line-end-position)))
        (comment-or-uncomment-region beg end))
    (next-line))

(global-set-key [f6] 'comment-or-uncomment-region-or-line)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(setq yasnippet_dir  (concat
                               (file-name-as-directory cfg_path)
                               (file-name-as-directory "emacs")
                               (file-name-as-directory "install")
                               "yasnippet_bundle")
)

(add-to-list 'load-path yasnippet_dir)
(require 'yasnippet-bundle)
(yas/load-directory "~/.emacs.d/snippets")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun command-line-diff (switch)
      (let ((file1 (pop command-line-args-left))
            (file2 (pop command-line-args-left)))
        (ediff file1 file2)))

(add-to-list 'command-switch-alist '("-diff" . command-line-diff))
(setq ediff-split-window-function 'split-window-horizontally)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FIll column indicator

;; (setq fill_column_indicator_dir  (concat
                               ;; (file-name-as-directory cfg_path)
                               ;; (file-name-as-directory "emacs")
                               ;; (file-name-as-directory "install")
                               ;; "fill-column-indicator")
;; )
;; (setq-default fill-column 80)
;; (add-to-list 'load-path fill_column_indicator_dir)
;; (require 'fill-column-indicator)
;; (define-globalized-minor-mode
;;  global-fci-mode fci-mode (lambda () (fci-mode 1)))
;; (global-fci-mode t)

(require 'term)
(term-set-escape-char ?\C-x)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq xcscope_dir  (concat
                               (file-name-as-directory cfg_path)
                               (file-name-as-directory "emacs")
                               (file-name-as-directory "install")
                               "xcscope")
)


(add-to-list 'load-path xcscope_dir)
(require 'xcscope)
(cscope-setup)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(cua-mode t)
(setq cua-auto-tabify-rectangles nil) ;; Don't tabify after rectangle commands
;;(setq cua-keep-region-after-copy t) ;; Standard Windows behaviour
;;(cua-selection-mode t)
(setq cua-enable-cua-keys nil)
;;(setq cua-highlight-region-shift-only t)
(setq cua-toggle-set-mark nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Org mode

(require 'org-install)
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(setq org-log-done t)

(menu-bar-mode 0)
(tool-bar-mode 0)

;; Show-paren-mode settings
(show-paren-mode t) ;; включить выделение выражений между {},[],()
(setq show-paren-style 'expression) ;; выделить цветом выражения между {},[],()
(setq redisplay-dont-pause t)  ;; лучшая отрисовка буфера

;; Coding-system settings
(set-language-environment 'UTF-8)
(if (system-is-linux) ;; для GNU/Linux кодировка utf-8, для MS Windows - windows-1251
    (progn
        (setq default-buffer-file-coding-system 'utf-8)
        (setq-default coding-system-for-read    'utf-8)
        (setq file-name-coding-system           'utf-8)
        (set-selection-coding-system            'utf-8)
        (set-keyboard-coding-system        'utf-8-unix)
        (set-terminal-coding-system             'utf-8)
        (prefer-coding-system                   'utf-8))
    (progn
        (prefer-coding-system                   'windows-1251)
        (set-terminal-coding-system             'windows-1251)
        (set-keyboard-coding-system        'windows-1251-unix)
        (set-selection-coding-system            'windows-1251)
        (setq file-name-coding-system           'windows-1251)
        (setq-default coding-system-for-read    'windows-1251)
        (setq default-buffer-file-coding-system 'windows-1251)))

;; Linum plugin
(require 'linum) ;; вызвать Linum
(line-number-mode   t) ;; показать номер строки в mode-line
(global-linum-mode  t) ;; показывать номера строк во всех буферах
(column-number-mode t) ;; показать номер столбца в mode-line
(setq linum-format " %d") ;; задаем формат нумерации строк

;; Syntax highlighting
(require 'font-lock)
(global-font-lock-mode             t) ;; включено с версии Emacs-22. На всякий...
(setq font-lock-maximum-decoration t)

;; Scrolling settings
(setq scroll-step               1) ;; вверх-вниз по 1 строке
(setq scroll-margin            10) ;; сдвигать буфер верх/вниз когда курсор в 10 шагах от верхней/нижней границы
(setq scroll-conservatively 10000)

;; Clipboard settings
(setq x-select-enable-clipboard t)
