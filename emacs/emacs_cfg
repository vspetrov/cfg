(put 'upcase-region 'disabled nil)

(setq cfg_path "~/cfg")

(require 'ido)
(ido-mode t)
(setq c-basic-offset 4)
(setq c-default-style '((java-mode . "java")
                        (awk-mode . "awk")
                        (other . "k&r")))
(add-hook 'c-mode-hook (lambda () (setq comment-start "//"
                                        comment-end   "")))

(setq-default indent-tabs-mode nil)
(setq-default normal-erase-is-backspace-mode 1)
(global-set-key [(control h)] 'delete-backward-char)
(global-set-key [(meta h)] 'backward-kill-word)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Setup Magit - Git front end for emacs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq magit_dir (concat
                          (file-name-as-directory cfg_path)
                          (file-name-as-directory "emacs")
                          (file-name-as-directory "install")
                          "magit-1.2.0")
)
(add-to-list 'load-path magit_dir)
(require 'magit)
(defalias 'mg 'magit-status)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



(defun create-tags (dir-name)
    "Create tags file."
    (interactive "DDirectory: ")
    (shell-command
     (format "ctags -f %s/TAGS -e -R %s" dir-name (directory-file-name dir-name)))
  )

(add-hook 'before-save-hook 'delete-trailing-whitespace)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Setup sr-speedbar
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq sr-speedbar-dir (concat
                                (file-name-as-directory cfg_path)
                                (file-name-as-directory "emacs")
                                (file-name-as-directory "install")
                                "sr_speedbar")

)
(add-to-list 'load-path sr-speedbar-dir)
(require 'sr-speedbar)
(global-set-key (kbd "M-s M-s") 'sr-speedbar-toggle)

(show-paren-mode 1)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Setup Color-themes
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(setq color_theme_dir (concat
                          (file-name-as-directory cfg_path)
                          (file-name-as-directory "emacs")
                          (file-name-as-directory "install")
                          "color-theme-6.6.0")
)
(add-to-list 'load-path color_theme_dir)
(require 'color-theme)

(setq solarize_theme_dir (concat
                          (file-name-as-directory cfg_path)
                          (file-name-as-directory "emacs")
                          (file-name-as-directory "install")
                          "emacs-color-theme-solarized-master")
)

(add-to-list 'load-path solarize_theme_dir)
(require 'color-theme-solarized)
(eval-after-load "color-theme"
  '(progn
     (color-theme-initialize)
     (color-theme-solarized-dark)))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq highlight_symbol_dir (concat
                           (file-name-as-directory cfg_path)
                           (file-name-as-directory "emacs")
                           (file-name-as-directory "install")
                           "highlight_symbol")
)

(add-to-list 'load-path highlight_symbol_dir)

(require 'highlight-symbol)

(global-set-key (kbd "C-x M-h") 'highlight-symbol-at-point)
(global-set-key (kbd "C-x M-r") 'highlight-symbol-remove-all)
(global-set-key [f3] 'highlight-symbol-next)
(global-set-key [f4] 'highlight-symbol-prev)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq autocomplete_dir  (concat
                               (file-name-as-directory cfg_path)
                               (file-name-as-directory "emacs")
                               (file-name-as-directory "install")
                               "auto-complete-1.3.1")
)

(setq autocomplete_dict (concat
                               (file-name-as-directory autocomplete_dir)
                               "dict")
)

(add-to-list 'load-path autocomplete_dir)
(require 'auto-complete-config)
(ac-config-default)
(add-to-list 'ac-dictionary-directories autocomplete_dict)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun my-cpp-highlight ()
  "highlight c/c++ #if 0 #endif macros"
  ;; (interactive)
  (setq cpp-known-face 'default)
  (setq cpp-unknown-face 'default)
  (setq cpp-known-writable 't)
  (setq cpp-unknown-writable 't)
  (setq cpp-edit-list '(("0" font-lock-comment-face default both)
                        ("1" default font-lock-comment-face both)))
  (cpp-highlight-buffer t))

(add-hook 'c-mode-common-hook 'my-cpp-highlight)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq save-place-file "~/.emacs.saveplace")
(setq-default save-place t)
(require 'saveplace)

(setq compilation-scroll-output 'first-error)

(global-set-key [f5] 'compile)

(defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end))
    (next-line))

(global-set-key [f6] 'comment-or-uncomment-region-or-line)
